{"version":3,"sources":["components/Copyright.tsx","app/hooks.ts","features/signIn/signInSlice.ts","features/signIn/SignIn.tsx","App.tsx","useToken.ts","api/exceptions.ts","api/baseApi.ts","features/signIn/signInAPI.ts","features/signIn/signInSaga.ts","app/rootSaga.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Copyright","Typography","variant","color","align","to","Date","getFullYear","useAppSelector","useSelector","initialState","signInModel","email","password","isLoading","signInSlice","createSlice","name","reducers","signInRequested","state","action","payload","signInSucceed","signInFailed","actions","selectSignInModel","signIn","selectSignInIsLoading","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","SignIn","classes","dispatch","useDispatch","React","useState","setState","handleSubmit","e","a","preventDefault","Container","component","maxWidth","CssBaseline","className","Avatar","onSubmit","TextField","required","fullWidth","id","label","autoComplete","type","autoFocus","onChange","currentTarget","value","Button","disabled","Grid","container","item","xs","Box","mt","App","path","getToken","tokenString","localStorage","getItem","JSON","parse","access_token","ApiError","message","Object","setPrototypeOf","prototype","Error","BadRequestError","NotFoundRequestError","UnauthorizedError","post","fetchBase","handleResponse","resourceUrl","data","result","method","token","fetch","headers","body","stringify","undefined","response","apiName","status","revokeToken","text","textResponse","console","log","sessionStorage","removeItem","postLogin","baseApi","settings","baseApiUrl","signInSaga","takeLatest","getType","call","Api","model","setItem","put","rootSaga","fork","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","store","configureStore","reducer","signInReducer","run","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.472a0ddb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Link } from 'react-router-dom';\n\nexport const Copyright = () => {\n    return (\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Copyright Â© '}\n        <Link to=\"/\">\n          Event Manager\n        </Link>{' '}\n        {new Date().getFullYear()}\n        {'.'}\n      </Typography>\n    );\n  }","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { SignInFormModel, SignInModel } from './signInModel';\n\ntype SignInState = SignInFormModel;\n\nconst initialState: SignInState = {\n  signInModel: {\n    email: '',\n    password: '',\n  },\n  isLoading: false,\n};\n\nexport const signInSlice = createSlice({\n  name: 'signIn',\n  initialState,\n  reducers: {\n    signInRequested: (state, action: PayloadAction<SignInModel>) => {\n      state.isLoading = true;\n      state.signInModel = action.payload;\n    },\n    signInSucceed: (state) => {\n      state = initialState;\n    },\n    signInFailed: (state, action: PayloadAction<Error>) => {\n      state.isLoading = false;\n    },\n  },\n});\n\nexport const { signInRequested, signInSucceed, signInFailed } = signInSlice.actions;\n\nexport const selectSignInModel = (state: RootState) => state.signIn.signInModel;\nexport const selectSignInEmail = (state: RootState) => state.signIn.signInModel.email;\nexport const selectSignInPassword = (state: RootState) => state.signIn.signInModel.password;\nexport const selectSignInIsLoading = (state: RootState) => state.signIn.isLoading;\n\nexport default signInSlice.reducer;\n","import React from 'react';\nimport {\n    Avatar,\n    Box,\n    Container,\n    Grid,\n    makeStyles,\n    TextField,\n    Typography,\n    Button,\n    CssBaseline\n} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nimport { Link } from 'react-router-dom';\nimport { Copyright } from '../../components/Copyright';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { SignInModel } from './signInModel';\nimport { selectSignInIsLoading, selectSignInModel, signInRequested } from './signInSlice';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport const SignIn = () => {\n    const classes = useStyles();\n    const isLoading = useAppSelector(selectSignInIsLoading);\n    const signInModel = useAppSelector(selectSignInModel);\n    const dispatch = useAppDispatch();\n    const [state, setState] = React.useState<SignInModel>(signInModel);\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault(); \n        dispatch(signInRequested(state));\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <form className={classes.form} onSubmit={e => handleSubmit(e)}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        type=\"email\"\n                        autoFocus\n                        onChange={(e) => setState({ ...state, email: e.currentTarget.value })}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        onChange={(e) => setState({ ...state, password: e.currentTarget.value })}\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        disabled={isLoading}\n                    >\n                        Sign In\n                    </Button>\n                    <Grid container>\n                        <Grid item xs>\n                            <Link to=\"/identify\">\n                                {\"Forgot password?\"}\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link to=\"/signup\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n            <Box mt={8}>\n                <Copyright />\n            </Box>\n        </Container >\n    );\n}\n\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { SignIn } from './features/signIn/SignIn';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <SignIn />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","\nimport { TokenModel } from './features/signIn/signInModel';\n\nexport function getToken() {\n \n    const tokenString: string | null = localStorage.getItem('token');\n\n    if (!tokenString) {\n      return undefined;\n    }\n\n    const model: TokenModel = JSON.parse(tokenString);\n\n    // if (model.experationDate < new Date()) {\n    //   return undefined;\n    // }\n\n    return model.access_token;\n \n}\n\nexport function getEmail() {\n \n  const tokenString: string | null = localStorage.getItem('token');\n\n  if (!tokenString) {\n    return undefined;\n  }\n\n  const model: TokenModel = JSON.parse(tokenString);\n\n  // if (model.experationDate < new Date()) {\n  //   return undefined;\n  // }\n\n  return model.email;\n\n}","export class ApiError extends Error {\n    constructor(message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, ApiError.prototype);\n    }\n}\n\nexport class BadRequestError extends Error {\n    constructor(message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, BadRequestError.prototype);\n    }\n}\n\nexport class NotFoundRequestError extends Error {\n  constructor(message?: string) {\n      super(message);\n      Object.setPrototypeOf(this, NotFoundRequestError.prototype);\n  }\n}\n\nexport class UnauthorizedError extends Error{\n    constructor(message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, UnauthorizedError.prototype);\n    }\n}","import { getToken } from \"../useToken\";\nimport { ApiError, BadRequestError, NotFoundRequestError, UnauthorizedError } from \"./exceptions\";\n\nexport function* get<T>(resourceUrl: string) {\n    const result: T = yield fetchBase('GET', resourceUrl);\n    return result;\n};\n\nexport function* post<TBody, TRes>(resourceUrl: string, data: TBody) {\n    const result: TRes = (yield fetchBase('POST', resourceUrl, data));\n    return result;\n};\n\nexport function* put<TBody, TRes>(resourceUrl: string, data: TBody) {\n    const result: TRes = (yield fetchBase('PUT', resourceUrl, data));\n    return result;\n};\n\n\nfunction* fetchBase(method: string, resourceUrl: string, data: any = null, retry?: boolean): any {\n    const token = getToken();\n\n    const result: Response = yield fetch(resourceUrl, {\n        method: method,\n        headers: {\n            'Authorization': 'Bearer ' + token,\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Pragma': 'no-cache',\n            'Cache-Control': 'no-cache'\n        },\n        body: data ? JSON.stringify(data) : undefined,\n    });\n\n    return yield handleResponse(result, method, resourceUrl, data);\n}\n\n\nfunction* handleResponse(response: Response, method: string, apiName: string, resourceUrl: string, data: any = null): any {\n\n    if (response.status === 401) {\n        revokeToken(apiName);\n        return new UnauthorizedError();\n    }\n\n    if (response.status === 200) {\n        const textResponse = yield response.text();\n        try {\n            return JSON.parse(textResponse);\n        }\n        catch {\n            return textResponse;\n        }\n    }\n\n    if (response.status === 400) {\n        console.log('handleResponse ...400');\n        const data = yield response.text();\n        throw new BadRequestError(data);\n    }\n\n    if (response.status === 404) {\n        console.log('handleResponse ...404');\n        throw new NotFoundRequestError();\n    }\n\n    console.log('handleResponse ...none');\n    const text = yield response.text();\n\n    throw new ApiError(text);\n}\n\nfunction revokeToken(apiName: string) {\n    sessionStorage.removeItem('token');\n};","import { Settings } from \"../../app/settings\";\nimport { SignInData, TokenData } from \"./signInData\";\nimport * as baseApi from \"../../api/baseApi\";\n\ndeclare const settings: Settings;\n\nexport function* postLogin(data: SignInData) {\n    const result: TokenData = yield baseApi.post<SignInData, TokenData>(settings.baseApiUrl + `/authenticate/auth`, data);\n    return result;\n}","import { put, call, takeLatest } from \"redux-saga/effects\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { TokenData } from \"./signInData\";\nimport { TokenModel } from \"./signInModel\";\nimport { signInSlice} from \"./signInSlice\";\nimport * as Api from \"./signInAPI\"; \n\nexport function* signInSaga() {\n    yield takeLatest(getType(signInSlice.actions.signInRequested), signInRequested);\n}\n\nfunction* signInRequested(action: ActionType<typeof signInSlice.actions.signInRequested>) {\n    try {\n        const data: TokenData = yield call(Api.postLogin, action.payload);\n        const model: TokenModel = { ...data }\n        \n        localStorage.setItem('token', JSON.stringify(model));\n\n        yield put(signInSlice.actions.signInSucceed());\n    } catch (e) {\n        yield put(signInSlice.actions.signInFailed(e))\n    }\n}","import { fork } from \"redux-saga/effects\";\nimport { signInSaga } from \"../features/signIn/signInSaga\";\n\nexport function* rootSaga() {\n    yield fork(signInSaga);\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport signInReducer from '../features/signIn/signInSlice';\nimport { rootSaga } from './rootSaga';\n\nlet sagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware({ thunk: false }), sagaMiddleware];\n\nexport const store = configureStore({\n  reducer: {\n    signIn: signInReducer,\n  },\n  middleware\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n// export type AppThunk<ReturnType = void> = ThunkAction<\n  // ReturnType,\n  // RootState,\n  // unknown,\n  // Action<string>\n// >;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}